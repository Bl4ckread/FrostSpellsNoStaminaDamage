using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;
using System.Threading.Tasks;

namespace FrostSpellsNoStaminaDamage
{
    public static class MyExtensions
    {
        public static bool ContainsInsensitive(this string str, string rhs)
        {
            if (str == "" || rhs == "")
                return false;
            return str.Contains(rhs.Trim(), StringComparison.OrdinalIgnoreCase);
        }
    }

    public class Program
    {
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "NoStaminaDamage.esp")
                .Run(args);
        }
        private static IPatcherState<ISkyrimMod, ISkyrimModGetter>? _state;
        internal static IPatcherState<ISkyrimMod, ISkyrimModGetter> State
        {
            get { return _state!; }
        }

        private static Lazy<Settings> _settings = null!;
        private static Settings Settings => _settings.Value;

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            _state = state;
            string[] blacklistedIDs = { };
            blacklistedIDs = blacklistedIDs.Concat(string.Join(",", Settings.Blacklist).Split(",")).ToArray();
            foreach (var magicEffectGetter in state.LoadOrder.PriorityOrder.MagicEffect().WinningContextOverrides())
            {
                var magicEffect = magicEffectGetter.Record;
                if (magicEffect.SecondActorValue == ActorValue.Stamina && magicEffect.Flags.ToString().Contains("Detrimental"))
                {
                    var contexts = state.LinkCache.ResolveAllContexts<IMagicEffect, IMagicEffectGetter>(magicEffect.FormKey).ToList();
                    var originalMod = contexts[contexts.Count() - 1].ModKey;
                    if (Settings.IgnoredMods.Contains(originalMod) || magicEffect.EditorID == null ||
                        blacklistedIDs.Any(magicEffect.EditorID.ContainsInsensitive))
                    {
                        Console.WriteLine("Skipping " + magicEffect.EditorID + " from mod " + originalMod);
                        continue;
                    }
                    IMagicEffect modifiedEffect = magicEffectGetter.GetOrAddAsOverride(state.PatchMod);
                    modifiedEffect.SecondActorValueWeight = 0;
                }
            }
        }
    }
}
